import asyncio
from datetime import datetime,timezone
from loguru import logger
from aiogram import Router, F
from aiogram.filters import Command,StateFilter, CommandObject
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery,LinkPreviewOptions
from aiogram.fsm.context import FSMContext
from src.handlers.decorators import new_user_handler,is_admin
from src.keyboards import user_keyboards
from src.methods.database.users_manager import UsersDatabase
from src.methods.database.videos_manager import VideosDatabase
from src.methods.database.config_manager import ConfigDatabase
from src.methods.utils import parse_callback_data, is_valid_email, get_file_id, get_bot_username,handle_send_ad, time_view, AdStateFilter
from src.misc import bot, CHANNEL_LINK, CHANNEL_ID,TIME_REQUEST,WATCHED_VIDEOS_THRESHOLD,AD_MSG_WITHDRAW,LOG_CHANNEL_LINK, LOG_CHANNEL_ID
router =  Router()



@router.message(Command("start"))
@new_user_handler
async def start_handler(message: Message, is_clb=False,**kwargs):
    user_id = message.chat.id if is_clb else message.from_user.id
    requested = await UsersDatabase.get_value(user_id,'requested')
    await message.answer("""Nuestra empresa tiene un acuerdo con una agencia de publicidad para promocionar un v√≠deo en TikTok üìà
 
Por lo tanto, estamos dispuestos a pagar a cada usuario por ver v√≠deos cortos subidos por este bot.
 
‚ö†Ô∏è Tienes que ver los v√≠deos para ser recompensado. Los v√≠deos duran entre 10 y 15 segundos
 
üí∞ Puedes ganar hasta <b>50 Sol</b> diariamente viendo v√≠deos
 
Para empezar, pulse el bot√≥n "<b>Ver v√≠deos y ganar dinero üì∫</b>".""",parse_mode="HTML",reply_markup=user_keyboards.get_start_kb(requested))
    
#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ"

@router.message(F.text == "Ver v√≠deos y ganar dinero üì∫")
async def videos(message:Message, is_clb=False,**kwargs):

    await message.answer("""Nuestra empresa tiene un contrato con una agencia de publicidad que necesita promocionar v√≠deos en TikTok üìà

Por lo tanto, estamos dispuestos a pagar a cada uno de nuestros usuarios por ver v√≠deos cortos enviados por este bot.
 
‚ö† Tienes que ver el v√≠deo hasta el final para conseguir la recompensa. La duraci√≥n del v√≠deo es de 10-15 segundos.
 
üí∞ Cada d√≠a puedes ganar hasta <b>50 Sol</b> viendo v√≠deos
 
Pulse el bot√≥n "<b>Empezar a ver üì∫</b>" para comenzar.""", parse_mode="HTML", reply_markup=user_keyboards.get_videos_kb())
     
#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Canal"
@router.message(F.text == "Canal")
async def channel(message:Message, is_clb=False,**kwargs):
    user_id = message.chat.id if is_clb else message.from_user.id
    await bot.send_message(user_id, text='√önete a nuestro canal y te ense√±aremos a ganar dinero!',reply_markup=user_keyboards.get_channel_kb(CHANNEL_LINK))

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–≤–∏–ª–∞"
@router.message(F.text == "Reglas üéØ")
async def rules(message:Message, is_clb=False,**kwargs):
    await message.answer("""Nuestra empresa tiene un acuerdo con una agencia de publicidad para promocionar un v√≠deo en TikTok üìà
 
Por lo tanto, estamos dispuestos a pagar a cada usuario por ver v√≠deos cortos subidos por este bot.
 
‚ö†Ô∏è Tienes que ver los v√≠deos para ser recompensado. Los v√≠deos duran entre 10 y 15 segundos
 
üí∞ Puedes ganar hasta <b>50 Sol</b> diariamente viendo v√≠deos
 
Para empezar, pulse el bot√≥n "<b>Ver v√≠deos y ganar dinero üì∫</b>".""",parse_mode="HTML")

#–û–ë—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@router.message(F.text == "üì± Mi perfil")
async def profile(message:Message, is_clb=False,**kwargs):
    user_id = message.chat.id if is_clb else message.from_user.id
    data = await UsersDatabase.get_user(user_id)
    balance, referrals, rereferrals = data[3], data[5], data[6]
    await message.answer(f"""Su saldo: <b>{balance} Sol</b>
N√∫mero de amigos invitados: <b>{referrals}</b>
Usuarios invitados por tus amigos: <b>{rereferrals}</b>""",parse_mode="HTML")
    

#–û–ë—Ä–∞–±–æ—Ç—á–∏–∫ –ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–æ–¥"

@router.message(F.text == "Retirada de dinero  üèß")
async def withdraw(message:Message, state: FSMContext, is_clb=False,**kwargs):
    user_id = message.chat.id 
    data = await UsersDatabase.get_user(user_id)
    requested = data[15]
    if requested == 1:
        requested_time =  datetime.strptime(data[17], "%Y-%m-%d %H:%M:%S").replace(tzinfo=timezone.utc)
        time_now = datetime.now(timezone.utc)
        time_diff = (time_now - requested_time).total_seconds()

        if time_diff < TIME_REQUEST:
            text = "Con √©xito ‚úÖ \nSu solicitud ha sido enviada ‚úÖ \nEspere 48 horas para una respuesta"
        else:
            text = ("""Desafortunadamente, experimentamos problemas t√©cnicos,
¬°nos disculpamos!
                    
Su dinero ser√° acreditado a su cuenta dentro de las 72 horas""")

        await message.answer(text=text)
        return
    
    watched_videos = data[11]
    ismember = data[13]

    if watched_videos < WATCHED_VIDEOS_THRESHOLD:
        await message.answer(
            "‚ùóÔ∏è Debes ver al menos 5 v√≠deos para retirar fondos.\n\nHaz clic en Empezar a ver üì∫ y empieza ya.",
            reply_markup=user_keyboards.get_videos_kb())
        return
    chat_member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)

    if chat_member.status not in {"member", "administrator", "creator"}:
        await message.answer(AD_MSG_WITHDRAW, 
                             reply_markup=user_keyboards.get_withdraw_kb()) 
        return

    
    balance = await UsersDatabase.get_value(user_id,'balance')
    if balance < 250.0:
        await message.answer(text =f'''El saldo m√≠nimo para retirar es  <b>250 Sol</b>
Su saldo: <b>{balance} Sol</b>
Lamentablemente, este l√≠mite tuvo que fijarse para no sobrecargar el sistema con retiradas de peque√±as cantidades.''',parse_mode="HTML", reply_markup=user_keyboards.get_check_balance_kb())
    else:
        await state.set_state(Form.card_number)
        await message.answer(text=f"üí≥ Env√≠ame los datos de tu cuenta <b>%PAYMENTOS%</b> de la que deseas retirar tus saldos",parse_mode="HTML")

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞—Ä–∞–±–æ–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ"
@router.message(F.text == "üí∞ Ganar a√∫n m√°s dinero üí∞")
async def earn_more(message:Message, is_clb=False,**kwargs):
    user_id = message.chat.id if is_clb else message.from_user.id
    bot_username = await get_bot_username(bot)
    await message.answer(f"""Nuestro proyecto es nuevo en telegram y necesitamos que todo el mundo nos conozca, por lo que estamos dispuestos a pagar por la publicidad üíµ
 
üèÜ Esta es tu link de enlace para las invitaciones üëá
 
<code>t.me/{bot_username}?start={user_id}</code>
 
‚úÖ Copia el enlace y env√≠alo a tus amigos y conocidos
 
üèÜ Por cada persona que visite el bot a trav√©s de tu enlace, obtienes <b>5 Sol</b>
 
Si alguien a quien invitas invita a nuevas personas, te pagan por usuario <b>2.5 Sol</b> 
 
As√≠ que puedes ganar sin l√≠mites!""",parse_mode="HTML")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤–∏–¥–µ–æ 
@router.callback_query(lambda c: c.data == "watch")
async def watch(clb: CallbackQuery, is_clb=True, include_earn_more = False,**kwargs):
    user_id = clb.message.chat.id 

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    queue = await UsersDatabase.get_value(user_id, "queue")
    video = await VideosDatabase.get_video_by_queue(queue)

    if video != -1:
        file_id = video[1]

        duration = int(video[2] * 0.75) #–ü–æ–∑–≤–æ–ª—è–µ–º —Å–∫–∏–ø–∞—Ç—å –≤–∏–¥–µ–æ –Ω–∞ 75%
        await clb.message.answer_video(video=file_id , reply_markup=user_keyboards.get_watch_kb(include_earn_more))
        await UsersDatabase.update_watching(user_id, duration, queue+1)  
    else:
        queue = 1  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        video = await VideosDatabase.get_video_by_queue(queue)
        file_id = video[1]
        duration = int(video[2])
        await clb.message.answer_video(video=file_id, reply_markup=user_keyboards.get_watch_kb(include_earn_more))
        await UsersDatabase.update_watching(user_id, duration, 2)  # –°—Ä–∞–∑—É —Å—Ç–∞–≤–∏–º 2, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–æ—Å—å –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
    await clb.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É" 
@router.callback_query(lambda c: c.data == "receive")
async def receive(clb: CallbackQuery, is_clb=True,**kwargs):
    user_id = clb.message.chat.id if is_clb else clb.message.from_user.id
 
    update_limit= datetime.strptime(await UsersDatabase.get_value(user_id,'update_limit'), "%Y-%m-%d %H:%M:%S").replace(tzinfo=timezone.utc)
    time_now= datetime.now(timezone.utc)
    if update_limit < time_now and update_limit !=0:
        await UsersDatabase.set_value(user_id,'today_left',20)
        
    user = await  UsersDatabase.get_user(user_id)
    watching = datetime.strptime(user[2], "%Y-%m-%d %H:%M:%S").replace(tzinfo=timezone.utc)
    balance = user[3]
    update_limit= datetime.strptime(user[9], "%Y-%m-%d %H:%M:%S").replace(tzinfo=timezone.utc)
    today_left = user[8]
    hold =  60*60*8
    if today_left>0:
        if watching < time_now:
            #–ï—Å–ª–∏ –Ω–∞—á–∞–ª —Å–º–æ—Ç—Ä–µ—Ç—å, —Ç–æ —Ä–µ—Ñ—Ä–µ—à –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 8 —á–∞—Å–æ–≤.
            await UsersDatabase.reward_user(user_id,2.5,hold,today_left)

            await bot.send_message(user_id, f"""üéâ Has ganado <b>2.5 Sol</b> por ver el v√≠deo.\n                    
ü§ë Su saldo: <b>{balance+2.5} Sol</b>""",parse_mode="HTML")
            await bot.delete_message(clb.message.chat.id,clb.message.message_id)
        else:
            await bot.answer_callback_query(clb.id,"""‚ö†Ô∏èTienes que ver el v√≠deo en su totalidad‚ö†Ô∏è""")
            await bot.delete_message(clb.message.chat.id,clb.message.message_id)
            #–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, –∞ –Ω–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –º–∞–Ω—É–∞–ª–∞
        await watch(clb, is_clb =False, include_earn_more = True)
    else:
        time_left = await time_view(update_limit=update_limit,time_now=time_now)
        await bot.send_message(user_id, text=f'''‚ö†Ô∏è Hoy has cumplido con todos tus compromisos publicitarios y has recibido un premio! üòå

Puedes conseguir un nuevo contrato de publicidad durante: <b>{time_left}</b>

Si quieres ganar m√°s, haz clic en el bot√≥n de abajo üëá''', parse_mode="HTML", reply_markup=user_keyboards.get_receive_kb()) 
        await bot.delete_message(clb.message.chat.id,clb.message.message_id)


@router.message(Command("set_admin"))
@is_admin
async def set_admin(message: Message, command: CommandObject, is_clb=False, **kwargs):
    if not command.args:
        await message.answer("‚ùå Empty request. \nExample: `/set_admin durov`\n!Username must be registered here!")
        return

    username = command.args.strip()
    user = await UsersDatabase.get_user_by_username(username)

    if user == -1:
        msg = f"‚ùå {username} not registered or username is not displayed."
        await message.answer(msg)
        logger.error(msg)
    else:
        await UsersDatabase.set_value(user[0], 'is_admin', 1)

        msg = f"‚úÖ {username} is admin now üòéüòéüòé"
        await message.answer(msg)
        logger.success(msg)

@router.message(Command("admin"))
@is_admin
async def admin(message: Message, is_clb=False,**kwargs):

    user_id = message.chat.id
    
    await bot.send_message(user_id,"""üìåAdmin Panelüìå:

/ad - –†–∞—Å—Å—ã–ª–∫–∞                            
/all_videos 
/set_admin - –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (/set_admin durov)        
/stats
/start - swith to user panel
                           
<a href="https://github.com/adoubt/earnbot2">github</a>
<a href="https://github.com/users/adoubt/projects/7/views/1">project board</a>""",link_preview_options=LinkPreviewOptions(is_disabled=True),parse_mode='HTML',reply_markup=user_keyboards.get_admin_kb())


@router.message(Command("ad"))
@is_admin
async def ad(message: Message, is_clb=False,**kwargs):
    user_id = message.chat.id if is_clb else message.from_user.id
    state = await ConfigDatabase.get_value('ad_state')
    text=f"""<b>üì¢ –†–µ–∫–ª–∞–º–∞</b>  

–ü–µ—Ä–µ—à–ª–∏ –º–∞–∫–µ—Ç –±–æ—Ç—É ‚Äî –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –≤ ‚Ä¢ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ ‚Ä¢ 
 <b>all</b> ‚Äî –≤—Å–µ–º  
 <b>test</b> ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ  
 <b>admins</b> ‚Äî –∞–¥–º–∏–Ω–∞–º  
 <b>off</b> ‚Äî –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç (–Ω—É–∂–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ)  

*–ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —Å—Ä–∞–∑—É –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.*  

üìä <a href="{LOG_CHANNEL_LINK}">–õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏</a>"""
    ikb = user_keyboards.get_ad_kb(state)
    if is_clb:
        await message.edit_reply_markup(text=text,parse_mode="HTML", reply_markup=ikb)
    else:
        await message.answer(text=text,parse_mode="HTML", reply_markup=ikb)
    
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±–µ–∫–∞ set_state
@router.callback_query(lambda clb: clb.data.startswith('set_state'))
async def set_state_callback_handler(clb: CallbackQuery, is_clb=False, **kwargs):
    data = clb.data.split('_',2)
    state = data[2]
    await ConfigDatabase.set_value('ad_state',state)
    await ad(clb.message, is_clb= True)
    
@router.message(Command("stats"))
@is_admin
async def stats(message: Message, is_clb=False,**kwargs):
    total_count = await UsersDatabase.get_count()
    await message.answer(f"Registred users: {total_count}")

@router.message(Command("all_videos"))
@is_admin
async def all_videos(message: Message, is_clb=False,current_page:int|None = 0,**kwargs):
    user_id = message.chat.id
    LIMIT_FOR_PAGE = 10
    total_videos = await VideosDatabase.get_count()
    if total_videos == 0:
        await message.answer('Nothing uploaded yet')
        return
    total_pages = (total_videos //LIMIT_FOR_PAGE) + 1
    if current_page >= total_pages:
        current_page = total_pages
    if current_page < 0:
        current_page = 0   
    videos = await VideosDatabase.get_all_offset(current_page*LIMIT_FOR_PAGE,LIMIT_FOR_PAGE)
    text = f'All Videos ({total_videos}):'
    ikb = user_keyboards.get_all_videos_kb(videos, current_page, total_pages)
    if is_clb:
        await message.edit_text(text=text, reply_markup=ikb)
    else:
        await message.answer(text=text, reply_markup=ikb) 
    

@router.callback_query(lambda clb: clb.data.startswith('all_videos'))
async def all_videos_clb_handler(clb: CallbackQuery, is_clb=False, **kwargs):
    data = clb.data.split('_',2)
    current_page = int(data[2])
    await all_videos(clb.message, is_clb=True,current_page = current_page)    
   
@router.callback_query(lambda clb: clb.data.startswith('video_'))
async def video_clb_handler(clb: CallbackQuery,is_clb=False, **kwargs):
  
    data = clb.data.split('_',1)
    video_id = int(data[1])  
    file_id = await VideosDatabase.get_value(video_id,'file_id')
    await clb.message.answer_video(file_id, reply_markup=user_keyboards.get_admin_video_kb(video_id))
    await clb.answer()

@router.callback_query(lambda clb: clb.data == 'hide_file')
async def hide_file_clb_handler(clb: CallbackQuery, is_clb=False, **kwargs):
    await clb.message.delete()

@router.callback_query(lambda clb: clb.data.startswith('delvideo'))
async def delvideo_clb_handler(clb: CallbackQuery, is_clb=False, **kwargs):
    data = clb.data.split('_',1)
    video_id = int(data[1])  

    await VideosDatabase.del_video(video_id)
    logger.info(f'Deteted video_id: {video_id}')
    await clb.message.delete()


#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–∫–æ–≤. —Å—Ç–æ–∏—Ç –≤–∫–æ–Ω—Ü–µ —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å –ø–æ–¥ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã
@router.message(AdStateFilter("off"), F.video)
@is_admin
async def new_video(message: Message, is_clb=False, **kwargs):
    
    r = await VideosDatabase.create_video(file_id=message.video.file_id,
                                      file_name=message.video.file_name,
                                      duration=message.video.duration,
                                      queue=0)
    if not r:
        await message.reply("already exists")
        return
    await message.reply("üëçüèø Video successfully added!")
    logger.success('üëçüèø Video successfully added!')
 
#–†–µ–∫–ª–∞–Ω—ã–µ –ø–æ—Å—Ç—ã 
@router.message(~AdStateFilter("off"), lambda msg: msg.forward_origin)
@is_admin
async def forward_handler(message: Message, is_clb=False, **kwargs):
    user_id = message.chat.id if is_clb else message.from_user.id
    
    if message:
        asyncio.create_task(handle_send_ad(message, user_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "exit"
@router.callback_query(lambda c: c.data == "exit")
async def exit_state(clb: CallbackQuery, state: FSMContext):

    await state.clear()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await clb.message.answer(text='no olvides aplicar')
    await clb.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ"
@router.callback_query(lambda c: c.data == "earn_more")
async def clb_withdraw(clb: CallbackQuery):
    
    await bot.answer_callback_query(clb.id)
    await earn_more(clb.message, is_clb = True)

@router.callback_query(lambda c: c.data == "verify_member")
async def verify_member(clb: CallbackQuery,state: FSMContext):
    user_id = clb.message.chat.id
    chat_member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)

    if chat_member.status == "member" or chat_member.status == "administrator" or chat_member.status == "creator":
        await clb.message.answer(text ='''Te has suscrito con √©xito al canal ‚úÖ.
No es necesario que se d√© de baja del canal si quiere retirar dinero.''')
        await UsersDatabase.set_value(user_id,'is_member',1)
        await withdraw(clb.message,state)
    else:
        await clb.message.delete()
        await clb.message.answer(text="Todav√≠a no est√°s suscrito al canal",reply_markup=user_keyboards.get_withdraw_kb())
    await clb.answer()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    card_number = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    email = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ—á—Ç—ã
    amount = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞ —Å—É–º–º—ã –¥–µ–Ω–µ–≥

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ card_number)
@router.message(Form.card_number)
async def process_card_number(message: Message, state: FSMContext):
    user_id = message.from_user.id
    card_number = message.text
    await UsersDatabase.set_value(user_id,'card_number',card_number)
    await state.set_state(Form.email)
    await message.answer(text=f'''Introduzca su direcci√≥n de correo electr√≥nico y le enviaremos la informaci√≥n.
por ejemplo: <a href="amigobro@gmail.com">amigobro@gmail.com</a>''', parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ email)
@router.message(Form.email)
async def process_email(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = message.text
    email = is_valid_email(data)
    if not email:
        await message.answer(text=f'''Introduzca su direcci√≥n de correo electr√≥nico y le enviaremos la informaci√≥n.
por ejemplo: <a href="amigobro@gmail.com">amigobro@gmail.com</a>''', parse_mode="HTML", reply_markup=user_keyboards.get_process_kb())
        return
    
    await UsersDatabase.set_value(user_id,'email',data)
    await state.set_state(Form.amount) 
    balance = await UsersDatabase.get_value(user_id,'balance')
    await message.answer(text=f'''Introduzca el importe que desea retirar.

El importe m√≠nimo de retirada es <b>250 Sol</b>.

üíµ Su saldo <b>%CURRENCIA% {balance}</b>''', parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ amount)
@router.message(Form.amount)
async def process_amount(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = message.text
    balance = await UsersDatabase.get_value(user_id,'balance')
    ikb = user_keyboards.get_process_kb()
    try:
        currency = int(float(data))
        if  currency< 250 or currency>balance:
            await message.answer(text=f'''‚ùå  No hay fondos suficientes en su saldo.El importe m√≠nimo de retirada es <b>250 Sol</b>.
    
    üíµ Your balance <b>%CURRENCY% {balance}</b>''',parse_mode="HTML",reply_markup=ikb)
            return
    except: #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.
        await message.answer(text=f'''‚ùå  Ingrese solo n√∫meros.El importe m√≠nimo de retirada es <b>250 Sol</b>.

üíµ Your balance <b>%CURRENCY% {balance}</b>''',parse_mode="HTML",reply_markup=ikb)
        return
    await UsersDatabase.request(user_id = user_id,amount_requested = int(data))
  
         ###–°–ú–ï–ù–ê –ö–õ–ê–í–´
    await message.answer( text=f'''Con √©xito ‚úÖ 
Su solicitud ha sido enviada ‚úÖ 
Espere 48 horas para una respuesta''',reply_markup=user_keyboards.get_start_kb(requested=1))
       
    await state.clear()