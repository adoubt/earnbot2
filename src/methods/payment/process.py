from src.methods.database.users_manager import UsersDatabase
from src.methods.database.licenses_manager import LicensesDatabase
from src.methods.database.products_manager import ProductsDatabase
from src.methods.database.carts_manager import ShoppingCartService
shoppingshopping_cart_service = ShoppingCartService()
from loguru import logger
from src.misc import SERVICE_FEE
import asyncio
from collections import defaultdict

class ProcessService:
    @classmethod
    async def validate_order(self,user_id) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∞–ª–∏–¥–µ–Ω –ª–∏ –∑–∞–∫–∞–∑.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏.
        """
        
        enriched_cart = []
        cart_total = {"cart_id":int,"user_id":int,"subtotal_amount":float,"service_fee":float, "total_amount":float,"payment_method":str}
        result = {"valid": True,"errors": [],"enriched_cart":enriched_cart,"cart_total":cart_total}
        cart_items= await shoppingshopping_cart_service.get_cart_items(user_id) 
        
        if not cart_items:
            result["valid"] = False
            result["errors"].append("Cart is Empty")
            return result    
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –ª–∏—Ü–µ–Ω–∑–∏–∏
        product_tasks = [ ProductsDatabase.get_product(product_id=item.product_id) for item in cart_items ] 
        license_tasks = [ LicensesDatabase.get_license(license_id=item.license_id) for item in cart_items ]
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ 
        products_results = await asyncio.gather(*product_tasks) 
        licenses_results = await asyncio.gather(*license_tasks) 
        subtotal_amount = 0
        total_amount = 0 
        service_fee = 0
        for item, product, license in zip(cart_items, products_results, licenses_results): 
            if product ==-1:
                result["valid"] = False
                result["errors"].append("Sorry 1 item from your cart has been deleted by seller")
                return result  
            
            elif product[9] == 1: 
                result["errors"].append("Sorry, the beat from your cart was sold exclusively")
                result["valid"] = False
                return result 
            elif not license: 
                result["errors"].append(f"Sorry, the license for '{product[2]}' has been changed.")
                result["valid"] = False
                return result
            elif license[13] == 1: #–ï—Å–ª–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤, —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º
                result = await shoppingshopping_cart_service.reserve_item(user_id=user_id,product_id=product[0])
                if not result: #–£–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –¥—Ä—É–≥–∏–º —é–∑–µ—Ä–æ–º 
                    result["errors"].append(f"Sorry, the beat {product[2]} already reserved.")
                    result["valid"] = False
                    return result
            #—Ç—É—Ç –±—É–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞
            #subtotal_amount+=license[4]*promocode
            cart_total["cart_id"] = item.cart_id 
            subtotal_amount+= license[4]
            
            enriched_cart.append({ 
                "item_id": item.item_id, 
                "cart_id": item.cart_id, 
                "product_id": item.product_id, 
                "quantity": item.quantity, 
                "license_id": item.license_id,
                "added_at": item.added_at, 
                "name": product[2], # –ò–º—è —Ç–æ–≤–∞—Ä–∞ 
                "price": license[4], # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
                    })
        
        if not enriched_cart:
            result["valid"] = False
            result["errors"].append("Cart is Empty")
            return result
        service_fee = subtotal_amount*SERVICE_FEE
        total_amount = subtotal_amount + service_fee
        payment_method = await UsersDatabase.get_value(user_id=user_id,key='default_payment_method')

        cart_total["payment_method"] = payment_method
        cart_total['subtotal_amount']= subtotal_amount
        cart_total['service_fee'] = service_fee
        cart_total['total_amount']= total_amount
        cart_total['user_id'] = user_id
        result["cart_total"] = cart_total 
        result['enriched_cart'] = enriched_cart
        return result
 

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    @classmethod
    async def generate_cart_summary(self,cart_items):
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –ø—Ä–æ–¥–∞–≤—Ü–∞–º –∏ –ª–∏—Ü–µ–Ω–∑–∏—è–º
        grouped_items = defaultdict(lambda: defaultdict(list))

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for item in cart_items:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –ª–∏—Ü–µ–Ω–∑–∏—é
            tasks.append(
                asyncio.create_task(self.process_item(item, grouped_items))
            )
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        await asyncio.gather(*tasks)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_lines = []
        message_lines.append(f"<b>Cart Summary</b>\n")
        
        subtotal_price = 0

        # for name, licenses in grouped_items.items():
        #     message_lines.append(f" **{name}**")  # –ü—Ä–æ–¥–∞–≤–µ—Ü
        #     for license_name, items in licenses.items():
        #         license_total = sum(item['price'] for item in items)
        #         total_price += license_total
        #         message_lines.append(f"  üìú {license_name}: ${license_total:.2f}")
        #         for item in items:
        #             message_lines.append(f"    - {item['name']} ${item['price']:.2f}")
        template_len = 30
        for name, licenses in grouped_items.items():
            seller_total = 0.00
            for license_name, items in licenses.items():
                license_total = sum(item['price'] for item in items)
                subtotal_price += license_total
                seller_total += license_total
            count = template_len - len(f"{name}${seller_total:.2f}") 
            message_lines.append(f"<b>{name}"+" "*count+f"${seller_total:.2f}</b>")
                # for item in items:
                #     message_lines.append(f"    - {item['name']} ${item['price']:.2f}")
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        count = template_len - len(f"\nSubtotal${subtotal_price:.2f}")+1
        message_lines.append(f"\n<pre>Subtotal"+' '*count+f"${subtotal_price:.2f}")
        discounts = None
        if discounts:
            count = template_len - len(f"Discount${discounts:.2f}")
            message_lines.append(f"Discounts"+' '+count+f"${discounts:.2f}") 
        service_fee = subtotal_price * SERVICE_FEE
        count = template_len - len(f"Service Fee${service_fee:.2f}")
        message_lines.append(f"Service Fee"+' '*count+f"${service_fee:.2f}")
        total_price = subtotal_price + service_fee
        count = template_len - len(f"Total ({len(items)} items)${total_price:.2f}")
        message_lines.append(f"<b>Total ({len(items)} items)"+' '*count+f"${total_price:.2f}</b></pre>")
        return "\n".join(message_lines)

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    @classmethod
    async def process_item(self, item, grouped_items):
    # –ü–æ–ª—É—á–∞–µ–º seller_id –∏ –∫–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–≤—Ü–∞
        seller_id = await ProductsDatabase.get_value(key='user_id', product_id=item['product_id'])
        channel = await UsersDatabase.get_value(key='channel', user_id=seller_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ (–∫–∞–Ω–∞–ª, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID –ø—Ä–æ–¥–∞–≤—Ü–∞)
        if channel not in (None, -1):
            name = f"@{channel}"
        else:
            username = await UsersDatabase.get_value(key='username', user_id=seller_id)
            name = f"@{username}" if username not in (None, -1) else str(seller_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
        license_name = await LicensesDatabase.get_value(key='name', license_id=item['license_id'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        grouped_items[name][license_name].append(item)





    

