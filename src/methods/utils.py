import urllib.parse
import re
import asyncio
from aiogram.filters import Filter
from aiogram.types import Message, ContentType
from aiogram import Bot
from src.misc import bot,CHANNEL_ID,LOG_CHANNEL_LINK, LOG_CHANNEL_ID, REFERR_REWARD_RARE, REREFERR_REWARD_RATE
from src.methods.database.users_manager import UsersDatabase
from src.methods.database.config_manager import ConfigDatabase
from loguru import logger



def get_file_id(message: Message, file_type: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if message.audio and file_type in ['mp3', 'preview']:
        return message.audio.file_id
    elif message.document and file_type in ['wav', 'stems']:
        return message.document.file_id
    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    elif message.reply_to_message:
        if message.reply_to_message.audio and file_type in ['mp3', 'preview']:
            return message.reply_to_message.audio.file_id
        elif message.reply_to_message.document and file_type in ['wav', 'stems']:
            return message.reply_to_message.document.file_id
    return None

def parse_callback_data(data: str) -> dict:
    """–£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ –ø–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    query_string = data.split(':', 1)[1]
    return dict(urllib.parse.parse_qsl(query_string))

def is_valid_email(email):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email-–∞–¥—Ä–µ—Å–∞"""
    pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    return re.match(pattern, email)

async def process_referral(user_id: int, level: int = 1):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É –Ω–∞ –ª—é–±–æ–º —É—Ä–æ–≤–Ω–µ"""
    bonus_levels = {1: REFERR_REWARD_RARE, 2: REREFERR_REWARD_RATE}  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω–µ–π
    referral_field = "referrals" if level == 1 else "rereferrals"
    amount = bonus_levels.get(level, 0)  # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –±–æ–ª—å—à–µ 2, –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ—Ç

    if amount > 0:
        await UsersDatabase.refer(user_id=user_id, amount=amount, **{referral_field: 1})

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    data = await UsersDatabase.get_user(user_id)
    balance, referrals, rereferrals, username, referrer = data[3], data[5], data[6], data[7], data[4]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""üéâ {"Alguien se registr√≥ en el bot usando su enlace" if level == 1 else "Alguien se registr√≥ en el bot utilizando el enlace de tu amigo"} üéâ

<b>+ {amount} Pesos</b> üí∞ 

üì¢ Has invitado a: <b>{referrals} usuarios</b>
üì£ Tus amigos han invitado a: <b>{rereferrals} usuarios</b>
üí∏ Su saldo: <b>{balance} Pesos</b>"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(user_id, message, parse_mode="HTML")
    except:
        logger.error(f'@{username}({user_id}) didn\'t receive the message')

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    if referrer and level < len(bonus_levels):
        await process_referral(referrer, level + 1)




async def is_user_subscribed(user_id: int, **kwargs):

    member = await bot.get_chat_member(int(CHANNEL_ID), user_id)
    if member.status in ["member", "creator", "administrator"]:
        return True
    else:
        return False
    

async def get_bot_username(bot: Bot):
    me = await bot.get_me()
    return me.username 



class AdStateFilter(Filter):
    def __init__(self, required_state: str):
        self.required_state = required_state

    async def __call__(self, message: Message) -> bool:
        state = await ConfigDatabase.get_value("ad_state")
        return state == self.required_state 
    

async def send_ad_message(user_id, message: Message):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é """
    try:
        if message.content_type == ContentType.TEXT:
            await bot.send_message(user_id, message.html_text, parse_mode="HTML")
        elif message.content_type == ContentType.PHOTO:
            await bot.send_photo(user_id, message.photo[-1].file_id, caption=message.html_text, parse_mode="HTML")
        elif message.content_type == ContentType.VIDEO:
            await bot.send_video(user_id, message.video.file_id, caption=message.html_text, parse_mode="HTML")
        elif message.content_type == ContentType.ANIMATION:
            await bot.send_animation(user_id, message.animation.file_id, caption=message.html_text, parse_mode="HTML")
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")
        return False

async def handle_send_ad(message: Message, admin:int):
    """ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–µ–∫–ª–∞–º—ã """
    state = await ConfigDatabase.get_value("ad_state")
    users = {
        "all": await UsersDatabase.get_all(),
        "test": [[admin]],
        "admins": await UsersDatabase.get_all_admins()
    }.get(state, [])
    sent_count = 0
    for user in users:
        success = await send_ad_message(user[0], message)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        if success:
            sent_count += 1
    admin_name = await UsersDatabase.get_value(admin,'username')
    msg = f"üì¢ Messages sent: <b>{sent_count}</b>\nSender: @{admin_name} {admin}\nstate: <b>{state}<b>"
    await bot.send_message(LOG_CHANNEL_ID, msg, parse_mode="HTML", disable_notification=True)
    logger.success(msg)


async def time_view(update_limit, time_now):
    remaining_timedelta = update_limit - time_now  # –£–∂–µ timedelta

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã
    formatted_remaining_time = str(remaining_timedelta).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    return formatted_remaining_time
